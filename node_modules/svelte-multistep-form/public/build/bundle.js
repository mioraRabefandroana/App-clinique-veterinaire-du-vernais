(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.MultiStepForm = {}));
}(this, (function (exports) { 'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function append_styles(target, style_sheet_id, styles) {
        const append_styles_to = get_root_for_style(target);
        if (!append_styles_to.getElementById(style_sheet_id)) {
            const style = element('style');
            style.id = style_sheet_id;
            style.textContent = styles;
            append_stylesheet(append_styles_to, style);
        }
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_data(text, data) {
        data = '' + data;
        if (text.wholeText !== data)
            text.data = data;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    /* src/StepForm.svelte generated by Svelte v3.44.1 */

    function add_css(target) {
    	append_styles(target, "svelte-cj6jwx", ".step-not-active.svelte-cj6jwx{display:none}");
    }

    function create_fragment(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

    	return {
    		c() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr(div, "class", "step step-not-active svelte-cj6jwx");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	return [$$scope, slots];
    }

    class StepForm extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance, create_fragment, safe_not_equal, {}, add_css);
    	}
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const store = writable(0);

    const currentStep = {
      subscribe: store.subscribe,
      increment: () => store.update(val => val + 1),
      decrement: () => store.update(val => val - 1),
      reset: () => store.update(val => val = 0),
    };

    const UUID_PATTERN = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
    const ERROR_DISPLAY_TIME = 3000;
    const BUTTON_OPACITY = "1";
    const BUTTON_DISABLED_OPACITY = "0.5";

    let activeStep;
    currentStep.subscribe((value) => {
      activeStep = value;
    });

    const formHasError = () => {
      const steps = document.querySelectorAll(".step");
      const step = steps[activeStep];

      const requiredFields = step.querySelectorAll("[required]");
      let hasError = false;
      let errorMessages = [];

      requiredFields.forEach((el) => {
        if (!el.checkValidity()) {
          hasError = true;
          errorMessages.push(el.dataset.multistepErrorMessage);
        }
      });

      if (hasError) {
        showError(errorMessages);
      }
      return hasError;
    };

    const showError = (errorMessages) => {
      let errorField = document.querySelector("#multistep-error-messages");

      deleteChildNodes(errorField);
      showOrHide(errorField, "visible");

      errorMessages.forEach((message) => {
        createElementAppendTo("p", message, errorField);
      });

      setTimeout(() => {
        showOrHide(errorField, "hidden");
      }, ERROR_DISPLAY_TIME);
    };


    const updateStepStatus = (operation) => {
      if (!operation) return;
      const steps = document.querySelectorAll(".step");

      steps[activeStep].classList.remove("step-is-active");
      steps[activeStep].classList.add("step-not-active");

      operation();

      steps[activeStep].classList.remove("step-not-active");
      steps[activeStep].classList.add("step-is-active");

      updateButtonVisibility();
    };

    const updateButtonVisibility = () => {
      const steps = document.querySelectorAll(".step");
      const stepsLength = steps.length;
      
      const prev = document.querySelector("#multistep-prev");
      const next = document.querySelector("#multistep-next");

      prev.style.opacity = BUTTON_OPACITY;
      next.style.opacity = BUTTON_OPACITY;

      if (activeStep == 0) {
        prev.style.opacity = BUTTON_DISABLED_OPACITY;
      }
      if (activeStep == stepsLength - 1) {
        next.style.opacity = BUTTON_DISABLED_OPACITY;
      }
    };

    const showOrHide = (el, status) => {
      if (!el) return;

      const statusOptions = {
        hidden: BUTTON_DISABLED_OPACITY,
        visible: BUTTON_OPACITY,
      };

      el.style.visibility = statusOptions[status] ? status : null;
      el.style.opacity = statusOptions[status] ? statusOptions[status] : null;
    };

    // TODO: think about it if this is nedeed or useless
    const uuidv4 = () => {
      return UUID_PATTERN.replace(/[xy]/g, function (c) {
        let r = (Math.random() * 16) | 0,
          v = c == "x" ? r : (r & 0x3) | 0x8;
        return v.toString(16);
      });
    };

    const deleteChildNodes = (el) => {
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };

    const createElementAppendTo = (type, content, target) => {
      let el = document.createElement(type);
      el.innerHTML = content;
      target.appendChild(el);
    };

    /* src/MasterForm.svelte generated by Svelte v3.44.1 */

    function add_css$1(target) {
    	append_styles(target, "svelte-1squrb9", ".name.svelte-1squrb9{color:#848383}.subtitle.svelte-1squrb9{color:rgb(223, 219, 219);display:block}.multistep-form.svelte-1squrb9{display:flex}.separator.svelte-1squrb9,.multistep-left-sidebar.svelte-1squrb9{flex:1}.multistep-right-sidebar.svelte-1squrb9{flex:3;text-align:left}.multistep-continue-button.svelte-1squrb9{float:right}.separator-check.svelte-1squrb9{width:15px;height:20px;margin:0 auto;border-radius:50%;box-shadow:0 0 0 2px #48db71;padding:11px 10px 2px;z-index:10}.separator-check-pending.svelte-1squrb9{width:15px;height:20px;margin:0 auto;border-radius:50%;box-shadow:0 0 0 2px #48db71;padding:11px 10px 2px;z-index:10}.separator-check-current.svelte-1squrb9{width:15px;height:20px;margin:0 auto;border-radius:50%;background:#5e40db;padding:11px 10px 2px;z-index:10;box-shadow:0px 1px 8px #5e40db}.separator-check-number.svelte-1squrb9{color:white;text-align:center;margin-top:-3px}.separator-check-number-blank.svelte-1squrb9{text-align:center;margin-top:-3px}.separator-line.svelte-1squrb9{border-right:2px solid #ccc;margin:0 auto;position:relative;height:40px;width:1px;margin-bottom:2px;margin-top:2px}.multistep-master-form.svelte-1squrb9{padding:30px;height:100%}#multistep-prev.svelte-1squrb9{cursor:pointer;margin-right:20px}#multistep-next.svelte-1squrb9{cursor:pointer;margin-left:20px}.dot.svelte-1squrb9{height:8px;width:8px;background-color:#bbb;border-radius:50%;display:inline-block;margin-left:-2px;margin-top:18px}.multistep-title-side.svelte-1squrb9{margin-top:40px;text-align:right}.multistep-form-title.svelte-1squrb9{text-align:left;color:#636262;font-weight:bold}.multistep-form-subtitle.svelte-1squrb9{text-align:left;color:rgb(223, 219, 219);margin-bottom:30px;font-weight:lighter}#multistep-error-messages.svelte-1squrb9{position:absolute;right:0;height:auto;width:auto;border-left:10px solid red;text-align:left;padding-left:10px;background:#fff;visibility:hidden;opacity:0;transition:visibility 0s, opacity 0.2s linear}");
    }

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	child_ctx[9] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    // (64:6) {#each multiStepOptions.stepsDescription as step}
    function create_each_block_1(ctx) {
    	let div;
    	let span0;
    	let t0_value = /*step*/ ctx[7].title + "";
    	let t0;
    	let t1;
    	let span1;
    	let t2_value = /*step*/ ctx[7].subtitle + "";
    	let t2;
    	let t3;

    	return {
    		c() {
    			div = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			span1 = element("span");
    			t2 = text(t2_value);
    			t3 = space();
    			attr(span0, "class", "name svelte-1squrb9");
    			attr(span1, "class", "subtitle svelte-1squrb9");
    			attr(div, "class", "multistep-title-side svelte-1squrb9");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, span0);
    			append(span0, t0);
    			append(div, t1);
    			append(div, span1);
    			append(span1, t2);
    			append(div, t3);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*multiStepOptions*/ 1 && t0_value !== (t0_value = /*step*/ ctx[7].title + "")) set_data(t0, t0_value);
    			if (dirty & /*multiStepOptions*/ 1 && t2_value !== (t2_value = /*step*/ ctx[7].subtitle + "")) set_data(t2, t2_value);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (86:39) 
    function create_if_block_2(ctx) {
    	let div1;
    	let div0;
    	let t0_value = /*index*/ ctx[9] + 1 + "";
    	let t0;
    	let t1;

    	return {
    		c() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			attr(div0, "class", "separator-check-number-blank svelte-1squrb9");
    			attr(div1, "class", "separator-check-pending svelte-1squrb9");
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);
    			append(div1, div0);
    			append(div0, t0);
    			append(div1, t1);
    		},
    		d(detaching) {
    			if (detaching) detach(div1);
    		}
    	};
    }

    // (80:39) 
    function create_if_block_1(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");

    			div.innerHTML = `<svg viewBox="0 0 32 32" style="fill:#48DB71"><path d="M1 14 L5 10 L13 18 L27 4 L31 8 L13 26 z"></path></svg> 
          `;

    			attr(div, "class", "separator-check svelte-1squrb9");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (76:8) {#if $currentStep === index}
    function create_if_block(ctx) {
    	let div1;
    	let div0;
    	let t0_value = /*index*/ ctx[9] + 1 + "";
    	let t0;
    	let t1;

    	return {
    		c() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			attr(div0, "class", "separator-check-number svelte-1squrb9");
    			attr(div1, "class", "separator-check-current svelte-1squrb9");
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);
    			append(div1, div0);
    			append(div0, t0);
    			append(div1, t1);
    		},
    		d(detaching) {
    			if (detaching) detach(div1);
    		}
    	};
    }

    // (72:6) {#each multiStepOptions.stepsDescription as step, index}
    function create_each_block(ctx) {
    	let div;
    	let t;
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*$currentStep*/ ctx[3] === /*index*/ ctx[9]) return create_if_block;
    		if (/*$currentStep*/ ctx[3] > /*index*/ ctx[9]) return create_if_block_1;
    		if (/*$currentStep*/ ctx[3] < /*index*/ ctx[9]) return create_if_block_2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	return {
    		c() {
    			div = element("div");
    			div.innerHTML = `<span class="dot svelte-1squrb9"></span>`;
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr(div, "class", "separator-line svelte-1squrb9");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			insert(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    		},
    		p(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (detaching) detach(t);

    			if (if_block) {
    				if_block.d(detaching);
    			}

    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    function create_fragment$1(ctx) {
    	let div5;
    	let div0;
    	let t0;
    	let h1;
    	let t1_value = /*multiStepOptions*/ ctx[0].formTitle + "";
    	let t1;
    	let t2;
    	let h5;
    	let t3_value = /*multiStepOptions*/ ctx[0].formSubtitle + "";
    	let t3;
    	let t4;
    	let form;
    	let div1;
    	let t5;
    	let div2;
    	let t6;
    	let div3;
    	let t7;
    	let div4;
    	let span0;
    	let t9;
    	let span1;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*multiStepOptions*/ ctx[0].stepsDescription;
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_value = /*multiStepOptions*/ ctx[0].stepsDescription;
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	return {
    		c() {
    			div5 = element("div");
    			div0 = element("div");
    			t0 = space();
    			h1 = element("h1");
    			t1 = text(t1_value);
    			t2 = space();
    			h5 = element("h5");
    			t3 = text(t3_value);
    			t4 = space();
    			form = element("form");
    			div1 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t5 = space();
    			div2 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t6 = space();
    			div3 = element("div");
    			if (default_slot) default_slot.c();
    			t7 = space();
    			div4 = element("div");
    			span0 = element("span");
    			span0.textContent = "prev";
    			t9 = text("\n    |\n    ");
    			span1 = element("span");
    			span1.textContent = "next";
    			attr(div0, "id", "multistep-error-messages");
    			attr(div0, "class", "svelte-1squrb9");
    			attr(h1, "class", "multistep-form-title svelte-1squrb9");
    			attr(h5, "class", "multistep-form-subtitle svelte-1squrb9");
    			attr(div1, "class", "multistep-left-sidebar svelte-1squrb9");
    			attr(div2, "class", "separator svelte-1squrb9");
    			attr(div3, "class", "multistep-right-sidebar svelte-1squrb9");
    			attr(form, "class", "multistep-form svelte-1squrb9");
    			attr(span0, "id", "multistep-prev");
    			attr(span0, "class", "svelte-1squrb9");
    			attr(span1, "id", "multistep-next");
    			attr(span1, "class", "svelte-1squrb9");
    			attr(div4, "class", "multistep-continue-button svelte-1squrb9");
    			attr(div5, "class", "multistep-master-form svelte-1squrb9");
    		},
    		m(target, anchor) {
    			insert(target, div5, anchor);
    			append(div5, div0);
    			append(div5, t0);
    			append(div5, h1);
    			append(h1, t1);
    			append(div5, t2);
    			append(div5, h5);
    			append(h5, t3);
    			append(div5, t4);
    			append(div5, form);
    			append(form, div1);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div1, null);
    			}

    			append(form, t5);
    			append(form, div2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div2, null);
    			}

    			append(form, t6);
    			append(form, div3);

    			if (default_slot) {
    				default_slot.m(div3, null);
    			}

    			append(div5, t7);
    			append(div5, div4);
    			append(div4, span0);
    			append(div4, t9);
    			append(div4, span1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(span0, "click", /*previousStep*/ ctx[2]),
    					listen(span1, "click", /*nextStep*/ ctx[1])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			if ((!current || dirty & /*multiStepOptions*/ 1) && t1_value !== (t1_value = /*multiStepOptions*/ ctx[0].formTitle + "")) set_data(t1, t1_value);
    			if ((!current || dirty & /*multiStepOptions*/ 1) && t3_value !== (t3_value = /*multiStepOptions*/ ctx[0].formSubtitle + "")) set_data(t3, t3_value);

    			if (dirty & /*multiStepOptions*/ 1) {
    				each_value_1 = /*multiStepOptions*/ ctx[0].stepsDescription;
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*$currentStep, multiStepOptions*/ 9) {
    				each_value = /*multiStepOptions*/ ctx[0].stepsDescription;
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div2, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div5);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $currentStep;
    	component_subscribe($$self, currentStep, $$value => $$invalidate(3, $currentStep = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { multiStepOptions } = $$props;
    	let { resetSteps } = $$props;

    	/*
    Lifecycle Hooks
    */
    	onMount(async () => {
    		let steps = document.querySelectorAll(".step");

    		steps.forEach((step, index) => {
    			step.setAttribute("id", uuidv4());
    			step.dataset.stepNumber = index;

    			if ($currentStep === index) {
    				step.classList.remove("step-not-active");
    				step.classList.add("step-is-active");
    			}
    		});

    		updateButtonVisibility();
    	});

    	afterUpdate(async () => {
    		if (resetSteps) {
    			updateStepStatus(stepStore.reset);
    			$$invalidate(4, resetSteps = false);
    		}
    	});

    	function nextStep() {
    		const steps = document.querySelectorAll(".step");

    		if (formHasError()) {
    			return;
    		}

    		if ($currentStep + 1 <= steps.length - 1) {
    			updateStepStatus(currentStep.increment);
    		}
    	}

    	const previousStep = () => {
    		if ($currentStep - 1 > -1) {
    			updateStepStatus(currentStep.decrement);
    		}
    	};

    	$$self.$$set = $$props => {
    		if ('multiStepOptions' in $$props) $$invalidate(0, multiStepOptions = $$props.multiStepOptions);
    		if ('resetSteps' in $$props) $$invalidate(4, resetSteps = $$props.resetSteps);
    		if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
    	};

    	return [
    		multiStepOptions,
    		nextStep,
    		previousStep,
    		$currentStep,
    		resetSteps,
    		$$scope,
    		slots
    	];
    }

    class MasterForm extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(
    			this,
    			options,
    			instance$1,
    			create_fragment$1,
    			safe_not_equal,
    			{
    				multiStepOptions: 0,
    				resetSteps: 4,
    				nextStep: 1,
    				previousStep: 2
    			},
    			add_css$1
    		);
    	}

    	get nextStep() {
    		return this.$$.ctx[1];
    	}

    	get previousStep() {
    		return this.$$.ctx[2];
    	}
    }

    exports.Form = MasterForm;
    exports.Step = StepForm;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
